Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

SOLUTION:-

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int L = 0; 
        int R = 0;
        Set<Character> myset = new HashSet();
        int max = 0;
        while(R<s.length()){
            char c = s.charAt(R);
            if(myset.add(c)){
                max = Math.max(max,R-L+1);
                R++;
            } else{
                while(s.charAt(L)!=c){
                    myset.remove(s.charAt(L));
                    L++;
                }
                myset.remove(c); L++;
            }
        }
        return max;
    }
}
