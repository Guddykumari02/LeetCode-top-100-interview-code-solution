Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
 

Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

Accepted

Solution 1:
class Solution {
    public int maxSubArray(int[] nums) {
        int max_so_far = 0;
        for(int i = 0; i < nums.length; i++){
            int Local_max = nums[i];
            for(int j = i+1; j < nums.length; j++){
                Local_max += nums[j];
                if(max_so_far < Local_max){
                    max_so_far = Local_max;
                    
                }
            }
        }
        return max_so_far;
        
    }
}

Solution 2: Best approach
class Solution {
    public int maxSubArray(int[] nums) {
        int max_so_far = Integer.MIN_VALUE;
        int curr = 0;
        for(int i = 0; i < nums.length; i++){
            curr += nums[i];
            if(max_so_far < curr){
                max_so_far = curr;
            }
            if(curr < 0)
                curr = 0;
        }
        return max_so_far;
    }
}
