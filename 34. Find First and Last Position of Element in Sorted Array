Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]
 

Constraints:

0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109
Accepted
1,072,817
Submissions

Solution:
class Solution {
    int firstElement(vector<int>& nums, int target) {
        int start = 0;
        int n = nums.size();
        int end = n - 1;
        int ans = -1;
        while(start <= end){
            int mid = start + (end - start)/2;
            if(nums[mid] == target){
                ans = mid;
                end = mid - 1;
            }
            else if(target > nums[mid]){
                start = mid + 1;
            }
            else{
                end = mid - 1;
                
            }
            mid = start + (end - start)/2;
        }
        return ans;
     }
    int LastElement(vector<int>& nums, int target) {
        int start = 0;
        int n = nums.size();
        int end = n - 1;
        int ans = -1;
        while(start <= end){
            int mid = start + (end - start)/2;
            if(nums[mid] == target){
                ans = mid;
                start = mid + 1;
            }
            else if(target > nums[mid]){
                start = mid + 1;
            }
            else{
                end = mid - 1;
                
            }
            mid = start + (end - start)/2;
        }
        return ans;
     }   
public:
         vector<int> searchRange(vector<int>& nums, int target) {
         vector<int>result(2);
         result[0] = firstElement(nums, target);
         result[1] = LastElement(nums, target);
         return result;
         }
};
