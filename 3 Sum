Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []
 

Constraints:

0 <= nums.length <= 3000
-105 <= nums[i] <= 105
Accepted
1,909,234
Submissions
6,148,914
Seen this question in a real interview before?

Yes

Solutions:
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int targetSum;
        int n = nums.size();
        sort(nums.begin(), nums.end());

        vector<vector<int>> result;
        for(int i = 0; i < n; i++){
            if(i>0 && nums[i]==nums[i-1])continue;//will skip if the previous value will be same as we don't want duplicates
            
            //using two pointer approach
            int j=i+1;
            int k=n-1;
            
            while(j<k){
                int targetSum=nums[i]+nums[k]+nums[j];
                if(targetSum<0){
                    j++;
                }
                else if(targetSum>0){
                    k--;
                }
                else{
                    result.push_back({nums[i],nums[j],nums[k]});        
                    j++;
                } 
                //skipping j and k index values if they have been covered in previous loop
                while((j>i+1)&&(j<k)&&(nums[j-1]==nums[j])){
                        j++;
                    }
                while((k<n-1)&&(j<k)&&(nums[k]==nums[k+1])){
                        k--;
                    }  
            }
            
        }
        return result;
    
    }
};
